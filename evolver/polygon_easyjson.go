// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package main

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonEd511098DecodeBitbucketOrgWolfgangMeyersEvolvePaintDigitalEvolver(in *jlexer.Lexer, out *Polypoint) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Distance":
			out.Distance = float64(in.Float64())
		case "Angle":
			out.Angle = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd511098EncodeBitbucketOrgWolfgangMeyersEvolvePaintDigitalEvolver(out *jwriter.Writer, in Polypoint) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Distance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Distance))
	}
	{
		const prefix string = ",\"Angle\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Angle))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Polypoint) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd511098EncodeBitbucketOrgWolfgangMeyersEvolvePaintDigitalEvolver(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Polypoint) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd511098EncodeBitbucketOrgWolfgangMeyersEvolvePaintDigitalEvolver(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Polypoint) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd511098DecodeBitbucketOrgWolfgangMeyersEvolvePaintDigitalEvolver(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Polypoint) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd511098DecodeBitbucketOrgWolfgangMeyersEvolvePaintDigitalEvolver(l, v)
}
func easyjsonEd511098DecodeBitbucketOrgWolfgangMeyersEvolvePaintDigitalEvolver1(in *jlexer.Lexer, out *Polygon) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "X":
			out.X = float64(in.Float64())
		case "Y":
			out.Y = float64(in.Float64())
		case "Points":
			if in.IsNull() {
				in.Skip()
				out.Points = nil
			} else {
				in.Delim('[')
				if out.Points == nil {
					if !in.IsDelim(']') {
						out.Points = make([]*Polypoint, 0, 8)
					} else {
						out.Points = []*Polypoint{}
					}
				} else {
					out.Points = (out.Points)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Polypoint
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Polypoint)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Points = append(out.Points, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "SavedColor":
			if in.IsNull() {
				in.Skip()
				out.SavedColor = nil
			} else {
				if out.SavedColor == nil {
					out.SavedColor = new(SavedColor)
				}
				easyjsonEd511098DecodeBitbucketOrgWolfgangMeyersEvolvePaintDigitalEvolver2(in, &*out.SavedColor)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd511098EncodeBitbucketOrgWolfgangMeyersEvolvePaintDigitalEvolver1(out *jwriter.Writer, in Polygon) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"X\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.X))
	}
	{
		const prefix string = ",\"Y\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Y))
	}
	{
		const prefix string = ",\"Points\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Points == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Points {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"SavedColor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.SavedColor == nil {
			out.RawString("null")
		} else {
			easyjsonEd511098EncodeBitbucketOrgWolfgangMeyersEvolvePaintDigitalEvolver2(out, *in.SavedColor)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Polygon) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd511098EncodeBitbucketOrgWolfgangMeyersEvolvePaintDigitalEvolver1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Polygon) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd511098EncodeBitbucketOrgWolfgangMeyersEvolvePaintDigitalEvolver1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Polygon) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd511098DecodeBitbucketOrgWolfgangMeyersEvolvePaintDigitalEvolver1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Polygon) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd511098DecodeBitbucketOrgWolfgangMeyersEvolvePaintDigitalEvolver1(l, v)
}
func easyjsonEd511098DecodeBitbucketOrgWolfgangMeyersEvolvePaintDigitalEvolver2(in *jlexer.Lexer, out *SavedColor) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "R":
			out.R = uint8(in.Uint8())
		case "G":
			out.G = uint8(in.Uint8())
		case "B":
			out.B = uint8(in.Uint8())
		case "A":
			out.A = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd511098EncodeBitbucketOrgWolfgangMeyersEvolvePaintDigitalEvolver2(out *jwriter.Writer, in SavedColor) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"R\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.R))
	}
	{
		const prefix string = ",\"G\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.G))
	}
	{
		const prefix string = ",\"B\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.B))
	}
	{
		const prefix string = ",\"A\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.A))
	}
	out.RawByte('}')
}
